{"version":3,"sources":["STTable.tsx","index.tsx"],"names":["STTable","render","data","props","args","columns","actions","row_key","tags_columns","sorter_columns","that","concat","title","key","fixed","width","action_width","text","record","size","map","action","i","href","onClick","handleAction","bind","column","includes","defaultSortOrder","sorter","a","b","aa","bb","test","Number","parseFloat","localeCompare","tags","index","split","tag","color","onChange","handleReAction","rowKey","dataSource","scroll","x","sticky","this","e","stopPropagation","setState","action_records","action_id","uuidv4","Streamlit","setComponentValue","state","pagination","filters","extra","setFrameHeight","setTimeout","console","log","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"kQAwBMA,E,4MAuCGC,OAAS,WACd,IAAMC,EAAO,EAAKC,MAAMC,KAAKF,KACzBG,EAAiC,EAAKF,MAAMC,KAAKC,QACrD,EAAyD,EAAKF,MAAMC,KAA7DE,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,aAAcC,EAAvC,EAAuCA,eACjCC,EAAI,eAwDV,OAvDIJ,IACFD,EAAUA,EAAQM,OAChB,CACEC,MAAO,SACPC,IAAK,YACLC,MAAO,QACPC,MAAO,EAAKZ,MAAMC,KAAKY,aACvBf,OAAQ,SAACgB,EAAMC,GAAP,OACN,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACGb,EAAQc,KAAI,SAASC,EAAgBC,GACpC,IAAMT,EAAMK,EAAOX,GACnB,OAAO,mBAAGgB,KAAK,IAAuBC,QAASd,EAAKe,aAAaJ,EAAQH,GAAQQ,KAAKhB,GAA/E,SAAuFW,GAAtER,EAAMQ,YAStCZ,GACFJ,EAAQe,KAAI,SAACO,GACPlB,EAA4BmB,SAAUD,EAAOd,OAC/Cc,EAAOE,iBAAmB,UACpBF,EAAOG,SACXH,EAAOG,OAAS,SAACC,EAAQC,GACvB,IAAMC,EAAKF,EAAGJ,EAAOd,KACfqB,EAAKF,EAAGL,EAAOd,KACrB,MAAmB,kBAARoB,EACFA,EAAKC,EAEV,QAAQC,KAAKF,IAAO,QAAQE,KAAKD,GAC5BE,OAAOC,WAAWJ,GAAMG,OAAOC,WAAWH,GAE5CD,EAAGK,cAAcJ,SAM9B1B,GACFH,EAAQe,KAAI,SAACO,GACPnB,EAA0BoB,SAAUD,EAAOd,OAC7Cc,EAAO1B,OAAS,SAACsC,EAAcrB,EAAasB,GAC1C,OAAO,mCACJD,EAAKE,MAAM,KAAKrB,KAAI,SAAAsB,GAAG,OACtB,cAAC,IAAD,CAAKC,MAAM,OAAX,SACGD,GADoB,QAAUA,EAAM,IAAMF,aAUtD,cAAC,IAAD,CACGI,SAAU,EAAKC,eAAenB,KAApB,gBACVoB,OAAQvC,EACRF,QAASA,EACT0C,WAAY7C,EACZ8C,OAAQ,CAAEC,EAAG,MACbC,QAAM,K,kDAxGd,SAAqB7B,EAAgBH,GACnC,IAAMR,EAAOyC,KACb,OAAO,SAASC,GACdA,EAAEC,kBACF3C,EAAK4C,SAAS,CACVjC,OAAQA,EACRkC,eAAgB,CAACrC,GACjBsC,UAAWC,gBAEb,kBAAMC,IAAUC,kBAAkBjD,EAAKkD,a,4BAK7C,SAAuBC,EAAiBC,EAAchC,EAAaiC,GACjEL,IAAUM,eAAe,KACzBC,WAAWP,IAAUM,eAAgB,GACrCE,QAAQC,IAAIrC,K,+BAYd,WACEmC,WAAWP,IAAUM,eAAgB,K,gCAGvC,WACEC,WAAWP,IAAUM,eAAgB,O,GApCnBI,KAgHPC,cAAwBrE,G,OCnIvCsE,IAASrE,OACP,cAAC,IAAMsE,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2f1666dc.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { Table, Tag, Space} from 'antd';\nimport { ColumnProps, ColumnsType, ColumnType } from \"antd/lib/table\";\nimport { v4 as uuidv4 } from 'uuid';\n\n\ninterface IExtra {\n  action: string\n}\n\ninterface State {\n  pagination: any\n  filters: any \n  sorter: any \n  action: string \n  action_records: any[]\n  action_id: string\n}\n\nclass STTable extends StreamlitComponentBase<State> {\n\n  private handleAction(action: string, record: object) {\n    const that = this;\n    return function(e:  React.MouseEvent<HTMLElement>) {\n      e.stopPropagation();\n      that.setState({ \n          action: action, \n          action_records: [record],\n          action_id: uuidv4(),\n        },\n        () => Streamlit.setComponentValue(that.state)\n      )\n    }\n  }\n\n  private handleReAction(pagination: any, filters: any, sorter: any, extra: IExtra) {\n    Streamlit.setFrameHeight(100);\n    setTimeout(Streamlit.setFrameHeight, 1);\n    console.log(sorter);\n    /* this.setState({ \n        pagination,\n        filters,\n        sorter,\n        action: extra.action,\n        action_id: uuidv4(),\n      },\n      () => Streamlit.setComponentValue(this.state)\n    ) */\n  }\n\n  componentDidMount() {\n    setTimeout(Streamlit.setFrameHeight, 1);\n  }\n\n  componentDidUpdate() {\n    setTimeout(Streamlit.setFrameHeight, 1);\n  }\n\n  public render = (): ReactNode => {\n    const data = this.props.args.data;\n    let columns : ColumnType<object>[] = this.props.args.columns;\n    const {actions, row_key, tags_columns, sorter_columns} = this.props.args;\n    const that = this;\n    if (actions) {\n      columns = columns.concat(\n        {\n          title: 'Action',\n          key: 'operation',\n          fixed: 'right', \n          width: this.props.args.action_width,\n          render: (text, record: any) => (\n            <Space size=\"middle\">\n              {actions.map(function(action: string, i: Number){\n                const key = record[row_key];\n                return <a href=\"#\" key={key + action} onClick={that.handleAction(action, record).bind(that)}>{action}</a>\n              })}\n            </Space>\n          )\n        }\n      );\n    }\n\n\n    if (sorter_columns) {\n      columns.map((column: ColumnType<object>) => {\n        if((sorter_columns as string[]).includes((column.key as string))){\n          column.defaultSortOrder = 'descend'\n          if (! column.sorter){\n            column.sorter = (a: any, b: any) => {\n              const aa = a[(column.key as string)];\n              const bb = b[(column.key as string)];\n              if (typeof(aa) === 'number') {\n                return aa - bb\n              }\n              if (/^\\d+$/.test(aa) && /^\\d+$/.test(bb)) {\n                return Number.parseFloat(aa) - Number.parseFloat(bb)\n              }\n              return aa.localeCompare(bb)\n            }\n          }\n        }\n      })\n    }\n    if (tags_columns) {\n      columns.map((column: ColumnType<object>) => {\n        if((tags_columns as string[]).includes((column.key as string))){\n          column.render = (tags: string, record: any, index: Number ) => {\n            return <>\n              {tags.split(',').map(tag => (\n                <Tag color=\"blue\" key={'tags/' + tag + '/' + index}>\n                  {tag}\n                </Tag>\n              ))}\n            </>\n          }\n        }\n      })\n    }\n    return (\n       <Table\n          onChange={this.handleReAction.bind(this)}\n          rowKey={row_key}\n          columns={columns}\n          dataSource={data}\n          scroll={{ x: 1500 }}\n          sticky\n        />\n    )\n  }\n}\n\nexport default withStreamlitConnection(STTable);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport STTable from \"./STTable\"\nimport 'antd/dist/antd.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <STTable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}
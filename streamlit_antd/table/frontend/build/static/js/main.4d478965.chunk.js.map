{"version":3,"sources":["STTable.tsx","index.tsx"],"names":["STTable","props","searchInput","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","placeholder","value","onChange","e","target","onPressEnter","handleSearch","marginBottom","display","type","onClick","icon","SearchOutlined","size","width","handleReset","closeDropdown","setState","searchText","searchedColumn","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","state","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","placement","title","data","args","columns","actions","row_key","tags_columns","sorter_columns","searchable_columns","that","map","column","ellipsis","showTitle","concat","key","fixed","action_width","action","i","href","handleAction","bind","Object","assign","defaultSortOrder","sorter","a","b","aa","bb","test","Number","parseFloat","localeCompare","tags","index","split","tag","handleReAction","rowKey","dataSource","scroll","x","sticky","this","stopPropagation","action_records","action_id","uuidv4","Streamlit","setComponentValue","pagination","filters","extra","setFrameHeight","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d478965.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { Table, Input, Button, Tag, Space, InputRef, Tooltip} from 'antd';\nimport { ColumnProps, ColumnsType, ColumnType } from \"antd/lib/table\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\n\n\ninterface IExtra {\n  action: string\n}\n\ninterface State {\n  pagination?: any\n  filters?: any \n  sorter?: any \n  action?: string \n  action_records?: any[]\n  action_id?: string\n  searchText?: string\n  searchedColumn?: string\n}\n\nexport interface FilterConfirmProps {\n  closeDropdown: boolean;\n}\nexport interface ColumnFilterItem {\n text: React.ReactNode;\n value: string | number | boolean;\n children?: ColumnFilterItem[];\n}\nexport interface FilterDropdownProps {\n prefixCls: string;\n setSelectedKeys: (selectedKeys: React.Key[]) => void;\n selectedKeys: React.Key[];\n confirm: (param?: FilterConfirmProps) => void;\n clearFilters: () => void;\n filters?: ColumnFilterItem[];\n visible: boolean;\n}\n\nclass STTable extends StreamlitComponentBase<State>{\n\n  constructor(props: any){\n    super(props)\n    this.state = {\n      searchedColumn: \"\"\n    }\n  }\n\n  searchInput?: InputRef;\n\n  getColumnSearchProps = (dataIndex: string) => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: FilterDropdownProps) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node: InputRef) => {\n            this.searchInput = node\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n            Reset\n          </Button>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            onClick={() => {\n              confirm({ closeDropdown: false });\n              this.setState({\n                searchText: (selectedKeys[0] as string),\n                searchedColumn: dataIndex,\n              });\n            }}\n          >\n            Filter\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean)=> <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value: string, record: any) =>\n      record[dataIndex]\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n        : '',\n    onFilterDropdownVisibleChange: (visible: boolean)=> {\n      if (visible) {\n        setTimeout(() => this.searchInput && this.searchInput.select(), 100);\n      }\n    },\n    render: (text: string) =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text ? text.toString() : ''}\n        />\n      ) : (<Tooltip placement=\"topLeft\" title={text}> \n        {text}</Tooltip>\n      ),\n  });\n\n  handleSearch = (selectedKeys: React.Key[], confirm: () => void, dataIndex: string) => {\n    confirm();\n    this.setState({\n      searchText: (selectedKeys[0] as string),\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = (clearFilters: () => void) => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  private handleAction(action: string, record: object) {\n    const that = this;\n    return function(e:  React.MouseEvent<HTMLElement>) {\n      e.stopPropagation();\n      that.setState({ \n          action: action, \n          action_records: [record],\n          action_id: uuidv4(),\n        },\n        () => Streamlit.setComponentValue(that.state)\n      )\n    }\n  }\n\n  private handleReAction(pagination: any, filters: any, sorter: any, extra: IExtra) {\n    Streamlit.setFrameHeight(100);\n    setTimeout(Streamlit.setFrameHeight, 1);\n    /* this.setState({ \n        pagination,\n        filters,\n        sorter,\n        action: extra.action,\n        action_id: uuidv4(),\n      },\n      () => Streamlit.setComponentValue(this.state)\n    ) */\n  }\n\n  componentDidMount() {\n    setTimeout(Streamlit.setFrameHeight, 1);\n  }\n\n  componentDidUpdate() {\n    setTimeout(Streamlit.setFrameHeight, 1);\n  }\n\n  public render = (): ReactNode => {\n    const data = this.props.args.data;\n    let columns : ColumnType<object>[] = this.props.args.columns;\n    const {actions, row_key, tags_columns, sorter_columns, searchable_columns} = this.props.args;\n    const that = this;\n    columns.map((column: ColumnType<object>) => {\n      column.ellipsis = {\n        showTitle: false,\n      };\n    })\n    if (actions) {\n      columns = columns.concat(\n        {\n          title: 'Action',\n          key: 'operation',\n          fixed: 'right', \n          width: this.props.args.action_width,\n          render: (text, record: any) => (\n            <Space size=\"middle\">\n              {actions.map(function(action: string, i: Number){\n                const key = record[row_key];\n                return <a href=\"#\" key={key + action} onClick={that.handleAction(action, record).bind(that)}>{action}</a>\n              })}\n            </Space>\n          )\n        }\n      );\n    }\n    if (searchable_columns) {\n      columns.map((column: ColumnType<object>) => {\n        if((searchable_columns as string[]).includes((column.key as string))){\n         Object.assign(column, this.getColumnSearchProps((column.dataIndex as string)));\n        }\n      })\n    }\n\n    if (sorter_columns) {\n      columns.map((column: ColumnType<object>) => {\n        if((sorter_columns as string[]).includes((column.key as string))){\n          column.defaultSortOrder = 'descend'\n          if (! column.sorter){\n            column.sorter = (a: any, b: any) => {\n              const aa = a[(column.key as string)];\n              const bb = b[(column.key as string)];\n              if (typeof(aa) === 'number') {\n                return aa - bb\n              }\n              if (/^\\d+$/.test(aa) && /^\\d+$/.test(bb)) {\n                return Number.parseFloat(aa) - Number.parseFloat(bb)\n              }\n              return aa.localeCompare(bb)\n            }\n          }\n        }\n      })\n    }\n    if (tags_columns) {\n      columns.map((column: ColumnType<object>) => {\n        if((tags_columns as string[]).includes((column.key as string))){\n           column.render = (tags: string, record: any, index: Number ) => {\n            return <>\n              {tags.split(',').map(tag => (\n                <Tag color=\"blue\" key={'tags/' + tag + '/' + index}>\n                  {tag}\n                </Tag>\n              ))}\n            </>\n          }\n        }\n      })\n    }\n    return (\n       <Table\n          onChange={this.handleReAction.bind(this)}\n          rowKey={row_key}\n          columns={columns}\n          dataSource={data}\n          scroll={{ x: 1500 }}\n          sticky\n        />\n    )\n  }\n}\n\nexport default withStreamlitConnection(STTable);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport STTable from \"./STTable\"\nimport 'antd/dist/antd.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <STTable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}